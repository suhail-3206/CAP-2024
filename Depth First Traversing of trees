PRE-ORDER,IN-ORDER,POEST-ORDER TRAVERSING COMES UNDER DEPTH FIRST TRAVERSING TECHNIQUES.

import java.util.*;
import java.lang.*;
public class Main
{
    //THE NODE OF THE TREE CONSISTES OF DATA, LEFT AND RIGHT
    static class Node{
        int data;
        Node left;
        Node right;
        
        Node(int data){
            this.data=data;
            this.left=null;
            this.right=null;
        }
        
    }
    //BUILDING THE TREE IN PREORDER MANNER USING BINARYTREE CLASS
    //BULIDTREE METHOD HELPS TO CREATE THE TREE IN PREORDER MANNER
    static class Binarytree{
        
        static int index=-1;
        public static Node buildtree(int nodes[]){
        index++;
        
        if(nodes[index]==-1){
            return null;
        }
        
            Node newnode=new Node(nodes[index]);
            newnode.left=buildtree(nodes);
            newnode.right=buildtree(nodes);
            return newnode;
        }
    }
    //PREORDER TRAVERSING 
    public static void preorder(Node root){
        if(root==null){
            return ;
        }
        System.out.print(root.data+" ");
        preorder(root.left);
        preorder(root.right);
    }
    //INDORDER TRAVERSING 
    public static void inorder(Node root){
        if(root==null){
            return;
        }
        inorder(root.left);
        System.out.print(root.data+" ");
        inorder(root.right);
    }
    //POST ORDER TRAVERSING
    public static void postorder(Node root){
        if(root==null){
            return ;
        }
        postorder(root.left);
        postorder(root.right);
        System.out.print(root.data+" ");
    }
    
    
    public static void main(String args[]){
        int nodes[] = {1, 2, 4, -1, -1, 5, -1, -1, 3, -1, 6, -1, -1};
        Binarytree bt =new Binarytree();
        Node root = bt.buildtree(nodes);
        preorder(root);
        System.out.println();
        inorder(root);
        System.out.println();
        postorder(root);
        
    }
}
